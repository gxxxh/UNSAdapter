// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: objects.proto

package objects

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobType int32

const (
	JobType_jobTypeUnknown JobType = 0
	JobType_jobTypeDLT     JobType = 1
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "jobTypeUnknown",
		1: "jobTypeDLT",
	}
	JobType_value = map[string]int32{
		"jobTypeUnknown": 0,
		"jobTypeDLT":     1,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_objects_proto_enumTypes[0].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_objects_proto_enumTypes[0]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{0}
}

type TaskGroupType int32

const (
	TaskGroupType_taskGroupTypeUnknown TaskGroupType = 0
	TaskGroupType_taskGroupTypeSingle  TaskGroupType = 1
	TaskGroupType_taskGroupTypeGang    TaskGroupType = 2
)

// Enum value maps for TaskGroupType.
var (
	TaskGroupType_name = map[int32]string{
		0: "taskGroupTypeUnknown",
		1: "taskGroupTypeSingle",
		2: "taskGroupTypeGang",
	}
	TaskGroupType_value = map[string]int32{
		"taskGroupTypeUnknown": 0,
		"taskGroupTypeSingle":  1,
		"taskGroupTypeGang":    2,
	}
)

func (x TaskGroupType) Enum() *TaskGroupType {
	p := new(TaskGroupType)
	*p = x
	return p
}

func (x TaskGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_objects_proto_enumTypes[1].Descriptor()
}

func (TaskGroupType) Type() protoreflect.EnumType {
	return &file_objects_proto_enumTypes[1]
}

func (x TaskGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskGroupType.Descriptor instead.
func (TaskGroupType) EnumDescriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{1}
}

type DLTGangType int32

const (
	DLTGangType_DLTGangTypeUnknown          DLTGangType = 0
	DLTGangType_DLTGangTypeDataParallel     DLTGangType = 1
	DLTGangType_DLTGangTypePipelineParallel DLTGangType = 2
)

// Enum value maps for DLTGangType.
var (
	DLTGangType_name = map[int32]string{
		0: "DLTGangTypeUnknown",
		1: "DLTGangTypeDataParallel",
		2: "DLTGangTypePipelineParallel",
	}
	DLTGangType_value = map[string]int32{
		"DLTGangTypeUnknown":          0,
		"DLTGangTypeDataParallel":     1,
		"DLTGangTypePipelineParallel": 2,
	}
)

func (x DLTGangType) Enum() *DLTGangType {
	p := new(DLTGangType)
	*p = x
	return p
}

func (x DLTGangType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DLTGangType) Descriptor() protoreflect.EnumDescriptor {
	return file_objects_proto_enumTypes[2].Descriptor()
}

func (DLTGangType) Type() protoreflect.EnumType {
	return &file_objects_proto_enumTypes[2]
}

func (x DLTGangType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DLTGangType.Descriptor instead.
func (DLTGangType) EnumDescriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{2}
}

// Job
// 表示一个用户提交的一个任务。
// 使用JobType表示任务类型，如：DLT
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID                string     `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	JobType              JobType    `protobuf:"varint,2,opt,name=jobType,proto3,enum=pb_gen.JobType" json:"jobType,omitempty"`
	Description          string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TaskGroup            *TaskGroup `protobuf:"bytes,4,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	SubmitTimeNanoSecond int64      `protobuf:"varint,5,opt,name=submitTimeNanoSecond,proto3" json:"submitTimeNanoSecond,omitempty"`
	UserGroup            *UserGroup `protobuf:"bytes,6,opt,name=userGroup,proto3" json:"userGroup,omitempty"`
	Deadline             int64      `protobuf:"varint,7,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Extra                []byte     `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *Job) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_jobTypeUnknown
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetTaskGroup() *TaskGroup {
	if x != nil {
		return x.TaskGroup
	}
	return nil
}

func (x *Job) GetSubmitTimeNanoSecond() int64 {
	if x != nil {
		return x.SubmitTimeNanoSecond
	}
	return 0
}

func (x *Job) GetUserGroup() *UserGroup {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *Job) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *Job) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UserGroup) Reset() {
	*x = UserGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroup) ProtoMessage() {}

func (x *UserGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroup.ProtoReflect.Descriptor instead.
func (*UserGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{1}
}

func (x *UserGroup) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserGroup) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type DLTJobExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMiniBatches int64 `protobuf:"varint,1,opt,name=totalMiniBatches,proto3" json:"totalMiniBatches,omitempty"`
}

func (x *DLTJobExtra) Reset() {
	*x = DLTJobExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTJobExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTJobExtra) ProtoMessage() {}

func (x *DLTJobExtra) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTJobExtra.ProtoReflect.Descriptor instead.
func (*DLTJobExtra) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{2}
}

func (x *DLTJobExtra) GetTotalMiniBatches() int64 {
	if x != nil {
		return x.TotalMiniBatches
	}
	return 0
}

// TaskGroup
// 表示这个任务包含的Task组，每个Task可理解为一个可执行程序（如容器）。
type TaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupType TaskGroupType `protobuf:"varint,1,opt,name=taskGroupType,proto3,enum=pb_gen.TaskGroupType" json:"taskGroupType,omitempty"`
	Tasks         []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// Types that are assignable to TaskGroupInfo:
	//	*TaskGroup_SingleTaskGroupInfo
	//	*TaskGroup_GangTaskGroupInfo
	TaskGroupInfo isTaskGroup_TaskGroupInfo `protobuf_oneof:"TaskGroupInfo"`
}

func (x *TaskGroup) Reset() {
	*x = TaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGroup) ProtoMessage() {}

func (x *TaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGroup.ProtoReflect.Descriptor instead.
func (*TaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{3}
}

func (x *TaskGroup) GetTaskGroupType() TaskGroupType {
	if x != nil {
		return x.TaskGroupType
	}
	return TaskGroupType_taskGroupTypeUnknown
}

func (x *TaskGroup) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (m *TaskGroup) GetTaskGroupInfo() isTaskGroup_TaskGroupInfo {
	if m != nil {
		return m.TaskGroupInfo
	}
	return nil
}

func (x *TaskGroup) GetSingleTaskGroupInfo() *SingleTaskGroup {
	if x, ok := x.GetTaskGroupInfo().(*TaskGroup_SingleTaskGroupInfo); ok {
		return x.SingleTaskGroupInfo
	}
	return nil
}

func (x *TaskGroup) GetGangTaskGroupInfo() *GangTaskGroup {
	if x, ok := x.GetTaskGroupInfo().(*TaskGroup_GangTaskGroupInfo); ok {
		return x.GangTaskGroupInfo
	}
	return nil
}

type isTaskGroup_TaskGroupInfo interface {
	isTaskGroup_TaskGroupInfo()
}

type TaskGroup_SingleTaskGroupInfo struct {
	SingleTaskGroupInfo *SingleTaskGroup `protobuf:"bytes,3,opt,name=singleTaskGroupInfo,proto3,oneof"`
}

type TaskGroup_GangTaskGroupInfo struct {
	GangTaskGroupInfo *GangTaskGroup `protobuf:"bytes,4,opt,name=gangTaskGroupInfo,proto3,oneof"`
}

func (*TaskGroup_SingleTaskGroupInfo) isTaskGroup_TaskGroupInfo() {}

func (*TaskGroup_GangTaskGroupInfo) isTaskGroup_TaskGroupInfo() {}

// Task
// 表示一个可执行程序（如容器）
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Extra       []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SingleTaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extra []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *SingleTaskGroup) Reset() {
	*x = SingleTaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskGroup) ProtoMessage() {}

func (x *SingleTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskGroup.ProtoReflect.Descriptor instead.
func (*SingleTaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{5}
}

func (x *SingleTaskGroup) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GangTaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupType TaskGroupType `protobuf:"varint,1,opt,name=taskGroupType,proto3,enum=pb_gen.TaskGroupType" json:"taskGroupType,omitempty"`
	Extra         []byte        `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GangTaskGroup) Reset() {
	*x = GangTaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GangTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GangTaskGroup) ProtoMessage() {}

func (x *GangTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GangTaskGroup.ProtoReflect.Descriptor instead.
func (*GangTaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{6}
}

func (x *GangTaskGroup) GetTaskGroupType() TaskGroupType {
	if x != nil {
		return x.TaskGroupType
	}
	return TaskGroupType_taskGroupTypeUnknown
}

func (x *GangTaskGroup) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GangTaskGroupDLTExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DLTGangType DLTGangType `protobuf:"varint,1,opt,name=DLTGangType,proto3,enum=pb_gen.DLTGangType" json:"DLTGangType,omitempty"`
}

func (x *GangTaskGroupDLTExtra) Reset() {
	*x = GangTaskGroupDLTExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GangTaskGroupDLTExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GangTaskGroupDLTExtra) ProtoMessage() {}

func (x *GangTaskGroupDLTExtra) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GangTaskGroupDLTExtra.ProtoReflect.Descriptor instead.
func (*GangTaskGroupDLTExtra) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{7}
}

func (x *GangTaskGroupDLTExtra) GetDLTGangType() DLTGangType {
	if x != nil {
		return x.DLTGangType
	}
	return DLTGangType_DLTGangTypeUnknown
}

// Cluster
// 集群的资源视图，每个集群对应一个资源管理器，所以包含一个resourceManagerID
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceManagerID string       `protobuf:"bytes,1,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	Description       string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Partitions        []*Partition `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Extra             []byte       `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{8}
}

func (x *Cluster) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Cluster) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Partition
// 一个资源管理器管理的全部资源可能被分为多个集群分区，
// 它们分别使用不同的调度器进行调度。
// 如100个节点组成的集群，前50个和后50个节点分别组成两个Partition。
// 则他们可以互不影响的使用两个调度器进行调度。
type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceManagerID string  `protobuf:"bytes,1,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID       string  `protobuf:"bytes,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Description       string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Nodes             []*Node `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Extra             []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{9}
}

func (x *Partition) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *Partition) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *Partition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Partition) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Partition) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Node
// 描述一个节点的资源视图。
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID      string       `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CPUSockets  []*CPUSocket `protobuf:"bytes,3,rep,name=CPUSockets,proto3" json:"CPUSockets,omitempty"`
	Extra       []byte       `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{10}
}

func (x *Node) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetCPUSockets() []*CPUSocket {
	if x != nil {
		return x.CPUSockets
	}
	return nil
}

func (x *Node) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// CPUSocket
// 描述一个CPU插槽，以及对应该CPU插槽的资源。
// 包含CPU描述信息，主机内存，加速器（多个）
type CPUSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUSocketID  string                  `protobuf:"bytes,1,opt,name=CPUSocketID,proto3" json:"CPUSocketID,omitempty"`
	Description  string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CPU          *CPU                    `protobuf:"bytes,3,opt,name=CPU,proto3" json:"CPU,omitempty"`
	HostMemory   *HostMemory             `protobuf:"bytes,4,opt,name=hostMemory,proto3" json:"hostMemory,omitempty"`
	Accelerators map[string]*Accelerator `protobuf:"bytes,5,rep,name=accelerators,proto3" json:"accelerators,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra        []byte                  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPUSocket) Reset() {
	*x = CPUSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSocket) ProtoMessage() {}

func (x *CPUSocket) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSocket.ProtoReflect.Descriptor instead.
func (*CPUSocket) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{11}
}

func (x *CPUSocket) GetCPUSocketID() string {
	if x != nil {
		return x.CPUSocketID
	}
	return ""
}

func (x *CPUSocket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CPUSocket) GetCPU() *CPU {
	if x != nil {
		return x.CPU
	}
	return nil
}

func (x *CPUSocket) GetHostMemory() *HostMemory {
	if x != nil {
		return x.HostMemory
	}
	return nil
}

func (x *CPUSocket) GetAccelerators() map[string]*Accelerator {
	if x != nil {
		return x.Accelerators
	}
	return nil
}

func (x *CPUSocket) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUID       string `protobuf:"bytes,1,opt,name=CPUID,proto3" json:"CPUID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Extra       []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPU) Reset() {
	*x = CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{12}
}

func (x *CPU) GetCPUID() string {
	if x != nil {
		return x.CPUID
	}
	return ""
}

func (x *CPU) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CPU) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HostMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesCapacity     int64   `protobuf:"varint,1,opt,name=bytesCapacity,proto3" json:"bytesCapacity,omitempty"`
	FrequencyMHz      float32 `protobuf:"fixed32,2,opt,name=frequencyMHz,proto3" json:"frequencyMHz,omitempty"`
	BandwidthGBPerSec float32 `protobuf:"fixed32,3,opt,name=bandwidthGBPerSec,proto3" json:"bandwidthGBPerSec,omitempty"`
	Extra             []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *HostMemory) Reset() {
	*x = HostMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMemory) ProtoMessage() {}

func (x *HostMemory) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMemory.ProtoReflect.Descriptor instead.
func (*HostMemory) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{13}
}

func (x *HostMemory) GetBytesCapacity() int64 {
	if x != nil {
		return x.BytesCapacity
	}
	return 0
}

func (x *HostMemory) GetFrequencyMHz() float32 {
	if x != nil {
		return x.FrequencyMHz
	}
	return 0
}

func (x *HostMemory) GetBandwidthGBPerSec() float32 {
	if x != nil {
		return x.BandwidthGBPerSec
	}
	return 0
}

func (x *HostMemory) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CPUMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model        string  `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Cores        int64   `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	FrequencyGHz float32 `protobuf:"fixed32,3,opt,name=frequencyGHz,proto3" json:"frequencyGHz,omitempty"`
	IPC          float32 `protobuf:"fixed32,4,opt,name=IPC,proto3" json:"IPC,omitempty"`
	Extra        []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPUMetaInfo) Reset() {
	*x = CPUMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUMetaInfo) ProtoMessage() {}

func (x *CPUMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUMetaInfo.ProtoReflect.Descriptor instead.
func (*CPUMetaInfo) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{14}
}

func (x *CPUMetaInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CPUMetaInfo) GetCores() int64 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPUMetaInfo) GetFrequencyGHz() float32 {
	if x != nil {
		return x.FrequencyGHz
	}
	return 0
}

func (x *CPUMetaInfo) GetIPC() float32 {
	if x != nil {
		return x.IPC
	}
	return 0
}

func (x *CPUMetaInfo) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Accelerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceleratorID       string               `protobuf:"bytes,1,opt,name=acceleratorID,proto3" json:"acceleratorID,omitempty"`
	Description         string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AcceleratorMetaInfo *AcceleratorMetaInfo `protobuf:"bytes,3,opt,name=acceleratorMetaInfo,proto3" json:"acceleratorMetaInfo,omitempty"`
	Extra               []byte               `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Accelerator) Reset() {
	*x = Accelerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accelerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accelerator) ProtoMessage() {}

func (x *Accelerator) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accelerator.ProtoReflect.Descriptor instead.
func (*Accelerator) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{15}
}

func (x *Accelerator) GetAcceleratorID() string {
	if x != nil {
		return x.AcceleratorID
	}
	return ""
}

func (x *Accelerator) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Accelerator) GetAcceleratorMetaInfo() *AcceleratorMetaInfo {
	if x != nil {
		return x.AcceleratorMetaInfo
	}
	return nil
}

func (x *Accelerator) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AcceleratorMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BriefType         string             `protobuf:"bytes,1,opt,name=briefType,proto3" json:"briefType,omitempty"`
	AcceleratorMemory *AcceleratorMemory `protobuf:"bytes,2,opt,name=acceleratorMemory,proto3" json:"acceleratorMemory,omitempty"`
	Flops             float32            `protobuf:"fixed32,3,opt,name=flops,proto3" json:"flops,omitempty"`
	Manufacturer      string             `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Extra             []byte             `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AcceleratorMetaInfo) Reset() {
	*x = AcceleratorMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorMetaInfo) ProtoMessage() {}

func (x *AcceleratorMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorMetaInfo.ProtoReflect.Descriptor instead.
func (*AcceleratorMetaInfo) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{16}
}

func (x *AcceleratorMetaInfo) GetBriefType() string {
	if x != nil {
		return x.BriefType
	}
	return ""
}

func (x *AcceleratorMetaInfo) GetAcceleratorMemory() *AcceleratorMemory {
	if x != nil {
		return x.AcceleratorMemory
	}
	return nil
}

func (x *AcceleratorMetaInfo) GetFlops() float32 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *AcceleratorMetaInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AcceleratorMetaInfo) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AcceleratorMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesCapacity     int64   `protobuf:"varint,1,opt,name=bytesCapacity,proto3" json:"bytesCapacity,omitempty"`
	FrequencyMHz      float32 `protobuf:"fixed32,2,opt,name=frequencyMHz,proto3" json:"frequencyMHz,omitempty"`
	BandwidthGBPerSec float32 `protobuf:"fixed32,3,opt,name=bandwidthGBPerSec,proto3" json:"bandwidthGBPerSec,omitempty"`
	Extra             []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AcceleratorMemory) Reset() {
	*x = AcceleratorMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorMemory) ProtoMessage() {}

func (x *AcceleratorMemory) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorMemory.ProtoReflect.Descriptor instead.
func (*AcceleratorMemory) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{17}
}

func (x *AcceleratorMemory) GetBytesCapacity() int64 {
	if x != nil {
		return x.BytesCapacity
	}
	return 0
}

func (x *AcceleratorMemory) GetFrequencyMHz() float32 {
	if x != nil {
		return x.FrequencyMHz
	}
	return 0
}

func (x *AcceleratorMemory) GetBandwidthGBPerSec() float32 {
	if x != nil {
		return x.BandwidthGBPerSec
	}
	return 0
}

func (x *AcceleratorMemory) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// JobAllocation
// 表示一个Job的全部Task分配得到的资源。
type JobAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID             string            `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	ResourceManagerID string            `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID       string            `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	TaskAllocations   []*TaskAllocation `protobuf:"bytes,4,rep,name=taskAllocations,proto3" json:"taskAllocations,omitempty"`
	Extra             []byte            `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *JobAllocation) Reset() {
	*x = JobAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAllocation) ProtoMessage() {}

func (x *JobAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAllocation.ProtoReflect.Descriptor instead.
func (*JobAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{18}
}

func (x *JobAllocation) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobAllocation) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *JobAllocation) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *JobAllocation) GetTaskAllocations() []*TaskAllocation {
	if x != nil {
		return x.TaskAllocations
	}
	return nil
}

func (x *JobAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// TaskAllocation
// 表示Task所占用的内存，CPU，加速器等信息。
type TaskAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	JobID  string `protobuf:"bytes,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	// Nullable 表示一个任务的开始执行时间。
	// 仅当RM向调度器发送该JobAllocation时，开始时间才有意义。
	// 如果开始执行时间是Null，则它必须是一个placeholder，否则将会被认为是非法的JobAllocation
	StartExecutionTimeNanoSecond *wrappers.Int64Value `protobuf:"bytes,4,opt,name=startExecutionTimeNanoSecond,proto3" json:"startExecutionTimeNanoSecond,omitempty"`
	// placeholder表示该task分配是具有占位符功能的，即等待需要的资源释放后，再让该task占用它需要的资源。
	Placeholder bool `protobuf:"varint,5,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// allocationTimeNanoSecond表示这个分配的开始时间。若是single的job，则allocation时间等于start时间
	// 若是gang的job，当需要等待资源释放时（placeholder），则allocation时间早于start时间。
	// 若gang的job可以直接运行（资源立刻拥有），则与single情况相同，allocation时间等于start时间。
	AllocationTimeNanoSecond int64                  `protobuf:"varint,6,opt,name=allocationTimeNanoSecond,proto3" json:"allocationTimeNanoSecond,omitempty"`
	HostMemoryAllocation     *HostMemoryAllocation  `protobuf:"bytes,7,opt,name=hostMemoryAllocation,proto3" json:"hostMemoryAllocation,omitempty"`
	CPUSocketAllocations     []*CPUSocketAllocation `protobuf:"bytes,8,rep,name=CPUSocketAllocations,proto3" json:"CPUSocketAllocations,omitempty"`
	AcceleratorAllocation    *AcceleratorAllocation `protobuf:"bytes,9,opt,name=acceleratorAllocation,proto3" json:"acceleratorAllocation,omitempty"`
	Extra                    []byte                 `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TaskAllocation) Reset() {
	*x = TaskAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAllocation) ProtoMessage() {}

func (x *TaskAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAllocation.ProtoReflect.Descriptor instead.
func (*TaskAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{19}
}

func (x *TaskAllocation) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TaskAllocation) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *TaskAllocation) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskAllocation) GetStartExecutionTimeNanoSecond() *wrappers.Int64Value {
	if x != nil {
		return x.StartExecutionTimeNanoSecond
	}
	return nil
}

func (x *TaskAllocation) GetPlaceholder() bool {
	if x != nil {
		return x.Placeholder
	}
	return false
}

func (x *TaskAllocation) GetAllocationTimeNanoSecond() int64 {
	if x != nil {
		return x.AllocationTimeNanoSecond
	}
	return 0
}

func (x *TaskAllocation) GetHostMemoryAllocation() *HostMemoryAllocation {
	if x != nil {
		return x.HostMemoryAllocation
	}
	return nil
}

func (x *TaskAllocation) GetCPUSocketAllocations() []*CPUSocketAllocation {
	if x != nil {
		return x.CPUSocketAllocations
	}
	return nil
}

func (x *TaskAllocation) GetAcceleratorAllocation() *AcceleratorAllocation {
	if x != nil {
		return x.AcceleratorAllocation
	}
	return nil
}

func (x *TaskAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// JobExecutionHistory
// 表示Job的执行历史
type JobExecutionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID                  string                  `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	ResourceManagerID      string                  `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	TaskExecutionHistories []*TaskExecutionHistory `protobuf:"bytes,4,rep,name=taskExecutionHistories,proto3" json:"taskExecutionHistories,omitempty"`
}

func (x *JobExecutionHistory) Reset() {
	*x = JobExecutionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecutionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecutionHistory) ProtoMessage() {}

func (x *JobExecutionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecutionHistory.ProtoReflect.Descriptor instead.
func (*JobExecutionHistory) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{20}
}

func (x *JobExecutionHistory) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobExecutionHistory) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *JobExecutionHistory) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *JobExecutionHistory) GetTaskExecutionHistories() []*TaskExecutionHistory {
	if x != nil {
		return x.TaskExecutionHistories
	}
	return nil
}

// TaskExecutionHistory
// 表示Task的执行历史
// 包含了该Task的执行环境（allocation），以及开始和结束时间
type TaskExecutionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionID                  string                 `protobuf:"bytes,1,opt,name=executionID,proto3" json:"executionID,omitempty"`
	NodeID                       string                 `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	JobID                        string                 `protobuf:"bytes,3,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID                       string                 `protobuf:"bytes,4,opt,name=taskID,proto3" json:"taskID,omitempty"`
	StartExecutionTimeNanoSecond int64                  `protobuf:"varint,5,opt,name=startExecutionTimeNanoSecond,proto3" json:"startExecutionTimeNanoSecond,omitempty"`
	DurationNanoSecond           int64                  `protobuf:"varint,6,opt,name=durationNanoSecond,proto3" json:"durationNanoSecond,omitempty"`
	HostMemoryAllocation         *HostMemoryAllocation  `protobuf:"bytes,7,opt,name=hostMemoryAllocation,proto3" json:"hostMemoryAllocation,omitempty"`
	CPUSocketAllocations         []*CPUSocketAllocation `protobuf:"bytes,8,rep,name=CPUSocketAllocations,proto3" json:"CPUSocketAllocations,omitempty"`
	AcceleratorAllocation        *AcceleratorAllocation `protobuf:"bytes,9,opt,name=acceleratorAllocation,proto3" json:"acceleratorAllocation,omitempty"`
}

func (x *TaskExecutionHistory) Reset() {
	*x = TaskExecutionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExecutionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionHistory) ProtoMessage() {}

func (x *TaskExecutionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionHistory.ProtoReflect.Descriptor instead.
func (*TaskExecutionHistory) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{21}
}

func (x *TaskExecutionHistory) GetExecutionID() string {
	if x != nil {
		return x.ExecutionID
	}
	return ""
}

func (x *TaskExecutionHistory) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TaskExecutionHistory) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *TaskExecutionHistory) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskExecutionHistory) GetStartExecutionTimeNanoSecond() int64 {
	if x != nil {
		return x.StartExecutionTimeNanoSecond
	}
	return 0
}

func (x *TaskExecutionHistory) GetDurationNanoSecond() int64 {
	if x != nil {
		return x.DurationNanoSecond
	}
	return 0
}

func (x *TaskExecutionHistory) GetHostMemoryAllocation() *HostMemoryAllocation {
	if x != nil {
		return x.HostMemoryAllocation
	}
	return nil
}

func (x *TaskExecutionHistory) GetCPUSocketAllocations() []*CPUSocketAllocation {
	if x != nil {
		return x.CPUSocketAllocations
	}
	return nil
}

func (x *TaskExecutionHistory) GetAcceleratorAllocation() *AcceleratorAllocation {
	if x != nil {
		return x.AcceleratorAllocation
	}
	return nil
}

type CPUSocketAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUSocketID string `protobuf:"bytes,1,opt,name=CPUSocketID,proto3" json:"CPUSocketID,omitempty"`
	Cores       int64  `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	Extra       []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPUSocketAllocation) Reset() {
	*x = CPUSocketAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSocketAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSocketAllocation) ProtoMessage() {}

func (x *CPUSocketAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSocketAllocation.ProtoReflect.Descriptor instead.
func (*CPUSocketAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{22}
}

func (x *CPUSocketAllocation) GetCPUSocketID() string {
	if x != nil {
		return x.CPUSocketID
	}
	return ""
}

func (x *CPUSocketAllocation) GetCores() int64 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPUSocketAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HostMemoryAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedBytesCapacity int64  `protobuf:"varint,1,opt,name=allocatedBytesCapacity,proto3" json:"allocatedBytesCapacity,omitempty"`
	Extra                  []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *HostMemoryAllocation) Reset() {
	*x = HostMemoryAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMemoryAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMemoryAllocation) ProtoMessage() {}

func (x *HostMemoryAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMemoryAllocation.ProtoReflect.Descriptor instead.
func (*HostMemoryAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{23}
}

func (x *HostMemoryAllocation) GetAllocatedBytesCapacity() int64 {
	if x != nil {
		return x.AllocatedBytesCapacity
	}
	return 0
}

func (x *HostMemoryAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AcceleratorAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceleratorID string `protobuf:"bytes,1,opt,name=acceleratorID,proto3" json:"acceleratorID,omitempty"`
	Extra         []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AcceleratorAllocation) Reset() {
	*x = AcceleratorAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorAllocation) ProtoMessage() {}

func (x *AcceleratorAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorAllocation.ProtoReflect.Descriptor instead.
func (*AcceleratorAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{24}
}

func (x *AcceleratorAllocation) GetAcceleratorID() string {
	if x != nil {
		return x.AcceleratorID
	}
	return ""
}

func (x *AcceleratorAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_objects_proto protoreflect.FileDescriptor

var file_objects_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e,
	0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x35, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x39, 0x0a, 0x0b, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x91, 0x02,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x13,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x11, 0x67, 0x61, 0x6e,
	0x67, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x47, 0x61,
	0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x11, 0x67,
	0x61, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x57, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x28, 0x0a, 0x0f, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x63, 0x0a, 0x0d, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x4e, 0x0a, 0x15, 0x47, 0x61, 0x6e,
	0x67, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x4c, 0x54, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x44, 0x4c, 0x54, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e,
	0x2e, 0x44, 0x4c, 0x54, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x44, 0x4c,
	0x54, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xb8, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x0a, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd8, 0x02, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x50, 0x55, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x43, 0x50, 0x55,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x43, 0x50, 0x55, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x54, 0x0a, 0x11,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x54, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x50, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x50, 0x55, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48,
	0x7a, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x47, 0x42,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x47, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12,
	0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x4d, 0x65,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x47,
	0x48, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x47, 0x48, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x43, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x49, 0x50, 0x43, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xbb, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xcd, 0x01,
	0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x69, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa2, 0x01,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x47, 0x42, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x47, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0xa4, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x5f, 0x0a, 0x1c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x14, 0x68,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x14, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53,
	0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x4a,
	0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65,
	0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xea,
	0x03, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x42, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x43, 0x50, 0x55,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x13, 0x43,
	0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x65, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x54, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x2a, 0x2d,
	0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x6a, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x54, 0x10, 0x01, 0x2a, 0x59, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x61, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0b, 0x44, 0x4c, 0x54, 0x47,
	0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4c, 0x54, 0x47, 0x61,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x4c, 0x54, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x4c, 0x54, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x10, 0x02, 0x42, 0x14, 0x5a,
	0x12, 0x55, 0x4e, 0x53, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_objects_proto_rawDescOnce sync.Once
	file_objects_proto_rawDescData = file_objects_proto_rawDesc
)

func file_objects_proto_rawDescGZIP() []byte {
	file_objects_proto_rawDescOnce.Do(func() {
		file_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_objects_proto_rawDescData)
	})
	return file_objects_proto_rawDescData
}

var file_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_objects_proto_goTypes = []interface{}{
	(JobType)(0),                  // 0: pb_gen.JobType
	(TaskGroupType)(0),            // 1: pb_gen.TaskGroupType
	(DLTGangType)(0),              // 2: pb_gen.DLTGangType
	(*Job)(nil),                   // 3: pb_gen.Job
	(*UserGroup)(nil),             // 4: pb_gen.UserGroup
	(*DLTJobExtra)(nil),           // 5: pb_gen.DLTJobExtra
	(*TaskGroup)(nil),             // 6: pb_gen.TaskGroup
	(*Task)(nil),                  // 7: pb_gen.Task
	(*SingleTaskGroup)(nil),       // 8: pb_gen.SingleTaskGroup
	(*GangTaskGroup)(nil),         // 9: pb_gen.GangTaskGroup
	(*GangTaskGroupDLTExtra)(nil), // 10: pb_gen.GangTaskGroupDLTExtra
	(*Cluster)(nil),               // 11: pb_gen.Cluster
	(*Partition)(nil),             // 12: pb_gen.Partition
	(*Node)(nil),                  // 13: pb_gen.Node
	(*CPUSocket)(nil),             // 14: pb_gen.CPUSocket
	(*CPU)(nil),                   // 15: pb_gen.CPU
	(*HostMemory)(nil),            // 16: pb_gen.HostMemory
	(*CPUMetaInfo)(nil),           // 17: pb_gen.CPUMetaInfo
	(*Accelerator)(nil),           // 18: pb_gen.Accelerator
	(*AcceleratorMetaInfo)(nil),   // 19: pb_gen.AcceleratorMetaInfo
	(*AcceleratorMemory)(nil),     // 20: pb_gen.AcceleratorMemory
	(*JobAllocation)(nil),         // 21: pb_gen.JobAllocation
	(*TaskAllocation)(nil),        // 22: pb_gen.TaskAllocation
	(*JobExecutionHistory)(nil),   // 23: pb_gen.JobExecutionHistory
	(*TaskExecutionHistory)(nil),  // 24: pb_gen.TaskExecutionHistory
	(*CPUSocketAllocation)(nil),   // 25: pb_gen.CPUSocketAllocation
	(*HostMemoryAllocation)(nil),  // 26: pb_gen.HostMemoryAllocation
	(*AcceleratorAllocation)(nil), // 27: pb_gen.AcceleratorAllocation
	nil,                           // 28: pb_gen.CPUSocket.AcceleratorsEntry
	(*wrappers.Int64Value)(nil),   // 29: google.protobuf.Int64Value
}
var file_objects_proto_depIdxs = []int32{
	0,  // 0: pb_gen.Job.jobType:type_name -> pb_gen.JobType
	6,  // 1: pb_gen.Job.taskGroup:type_name -> pb_gen.TaskGroup
	4,  // 2: pb_gen.Job.userGroup:type_name -> pb_gen.UserGroup
	1,  // 3: pb_gen.TaskGroup.taskGroupType:type_name -> pb_gen.TaskGroupType
	7,  // 4: pb_gen.TaskGroup.tasks:type_name -> pb_gen.Task
	8,  // 5: pb_gen.TaskGroup.singleTaskGroupInfo:type_name -> pb_gen.SingleTaskGroup
	9,  // 6: pb_gen.TaskGroup.gangTaskGroupInfo:type_name -> pb_gen.GangTaskGroup
	1,  // 7: pb_gen.GangTaskGroup.taskGroupType:type_name -> pb_gen.TaskGroupType
	2,  // 8: pb_gen.GangTaskGroupDLTExtra.DLTGangType:type_name -> pb_gen.DLTGangType
	12, // 9: pb_gen.Cluster.partitions:type_name -> pb_gen.Partition
	13, // 10: pb_gen.Partition.nodes:type_name -> pb_gen.Node
	14, // 11: pb_gen.Node.CPUSockets:type_name -> pb_gen.CPUSocket
	15, // 12: pb_gen.CPUSocket.CPU:type_name -> pb_gen.CPU
	16, // 13: pb_gen.CPUSocket.hostMemory:type_name -> pb_gen.HostMemory
	28, // 14: pb_gen.CPUSocket.accelerators:type_name -> pb_gen.CPUSocket.AcceleratorsEntry
	19, // 15: pb_gen.Accelerator.acceleratorMetaInfo:type_name -> pb_gen.AcceleratorMetaInfo
	20, // 16: pb_gen.AcceleratorMetaInfo.acceleratorMemory:type_name -> pb_gen.AcceleratorMemory
	22, // 17: pb_gen.JobAllocation.taskAllocations:type_name -> pb_gen.TaskAllocation
	29, // 18: pb_gen.TaskAllocation.startExecutionTimeNanoSecond:type_name -> google.protobuf.Int64Value
	26, // 19: pb_gen.TaskAllocation.hostMemoryAllocation:type_name -> pb_gen.HostMemoryAllocation
	25, // 20: pb_gen.TaskAllocation.CPUSocketAllocations:type_name -> pb_gen.CPUSocketAllocation
	27, // 21: pb_gen.TaskAllocation.acceleratorAllocation:type_name -> pb_gen.AcceleratorAllocation
	24, // 22: pb_gen.JobExecutionHistory.taskExecutionHistories:type_name -> pb_gen.TaskExecutionHistory
	26, // 23: pb_gen.TaskExecutionHistory.hostMemoryAllocation:type_name -> pb_gen.HostMemoryAllocation
	25, // 24: pb_gen.TaskExecutionHistory.CPUSocketAllocations:type_name -> pb_gen.CPUSocketAllocation
	27, // 25: pb_gen.TaskExecutionHistory.acceleratorAllocation:type_name -> pb_gen.AcceleratorAllocation
	18, // 26: pb_gen.CPUSocket.AcceleratorsEntry.value:type_name -> pb_gen.Accelerator
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_objects_proto_init() }
func file_objects_proto_init() {
	if File_objects_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTJobExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GangTaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GangTaskGroupDLTExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Accelerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecutionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExecutionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSocketAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMemoryAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_objects_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TaskGroup_SingleTaskGroupInfo)(nil),
		(*TaskGroup_GangTaskGroupInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_objects_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_objects_proto_goTypes,
		DependencyIndexes: file_objects_proto_depIdxs,
		EnumInfos:         file_objects_proto_enumTypes,
		MessageInfos:      file_objects_proto_msgTypes,
	}.Build()
	File_objects_proto = out.File
	file_objects_proto_rawDesc = nil
	file_objects_proto_goTypes = nil
	file_objects_proto_depIdxs = nil
}
