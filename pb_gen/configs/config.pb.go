// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: config.proto

package configs

import (
	objects "UNS/pb_gen/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 调度器类型
type SchedulerType int32

const (
	SchedulerType_schedulerTypeNaive SchedulerType = 0
	SchedulerType_schedulerTypeUNS   SchedulerType = 1
	SchedulerType_schedulerTypeSJF   SchedulerType = 2
	SchedulerType_schedulerTypeEDF   SchedulerType = 3
)

// Enum value maps for SchedulerType.
var (
	SchedulerType_name = map[int32]string{
		0: "schedulerTypeNaive",
		1: "schedulerTypeUNS",
		2: "schedulerTypeSJF",
		3: "schedulerTypeEDF",
	}
	SchedulerType_value = map[string]int32{
		"schedulerTypeNaive": 0,
		"schedulerTypeUNS":   1,
		"schedulerTypeSJF":   2,
		"schedulerTypeEDF":   3,
	}
)

func (x SchedulerType) Enum() *SchedulerType {
	p := new(SchedulerType)
	*p = x
	return p
}

func (x SchedulerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (SchedulerType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x SchedulerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerType.Descriptor instead.
func (SchedulerType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

type PredictorType int32

const (
	PredictorType_predictorTypeUnknown         PredictorType = 0
	PredictorType_predictorTypeDLTRandom       PredictorType = 1
	PredictorType_predictorTypeDLTDataOriented PredictorType = 2
)

// Enum value maps for PredictorType.
var (
	PredictorType_name = map[int32]string{
		0: "predictorTypeUnknown",
		1: "predictorTypeDLTRandom",
		2: "predictorTypeDLTDataOriented",
	}
	PredictorType_value = map[string]int32{
		"predictorTypeUnknown":         0,
		"predictorTypeDLTRandom":       1,
		"predictorTypeDLTDataOriented": 2,
	}
)

func (x PredictorType) Enum() *PredictorType {
	p := new(PredictorType)
	*p = x
	return p
}

func (x PredictorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredictorType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (PredictorType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x PredictorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredictorType.Descriptor instead.
func (PredictorType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

type ConsolidationLevel int32

const (
	ConsolidationLevel_Unknown       ConsolidationLevel = 0
	ConsolidationLevel_NVLink        ConsolidationLevel = 1
	ConsolidationLevel_SameCPUSocket ConsolidationLevel = 2
	ConsolidationLevel_DiffCPUSocket ConsolidationLevel = 3
	ConsolidationLevel_DiffNode      ConsolidationLevel = 4
)

// Enum value maps for ConsolidationLevel.
var (
	ConsolidationLevel_name = map[int32]string{
		0: "Unknown",
		1: "NVLink",
		2: "SameCPUSocket",
		3: "DiffCPUSocket",
		4: "DiffNode",
	}
	ConsolidationLevel_value = map[string]int32{
		"Unknown":       0,
		"NVLink":        1,
		"SameCPUSocket": 2,
		"DiffCPUSocket": 3,
		"DiffNode":      4,
	}
)

func (x ConsolidationLevel) Enum() *ConsolidationLevel {
	p := new(ConsolidationLevel)
	*p = x
	return p
}

func (x ConsolidationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsolidationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (ConsolidationLevel) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x ConsolidationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsolidationLevel.Descriptor instead.
func (ConsolidationLevel) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

// 资源管理器配置
type RMConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指定集群物理视图
	Cluster *objects.Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// 指定多个调度器的配置
	SchedulersConfiguration *SchedulersConfiguration `protobuf:"bytes,2,opt,name=schedulersConfiguration,proto3" json:"schedulersConfiguration,omitempty"`
}

func (x *RMConfiguration) Reset() {
	*x = RMConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMConfiguration) ProtoMessage() {}

func (x *RMConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMConfiguration.ProtoReflect.Descriptor instead.
func (*RMConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *RMConfiguration) GetCluster() *objects.Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *RMConfiguration) GetSchedulersConfiguration() *SchedulersConfiguration {
	if x != nil {
		return x.SchedulersConfiguration
	}
	return nil
}

// 全部调度器的配置。目前包括针对每个partition的调度器配置
type SchedulersConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionID2SchedulerConfiguration map[string]*SchedulerConfiguration `protobuf:"bytes,1,rep,name=partitionID2SchedulerConfiguration,proto3" json:"partitionID2SchedulerConfiguration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchedulersConfiguration) Reset() {
	*x = SchedulersConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulersConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulersConfiguration) ProtoMessage() {}

func (x *SchedulersConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulersConfiguration.ProtoReflect.Descriptor instead.
func (*SchedulersConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *SchedulersConfiguration) GetPartitionID2SchedulerConfiguration() map[string]*SchedulerConfiguration {
	if x != nil {
		return x.PartitionID2SchedulerConfiguration
	}
	return nil
}

// 针对单个调度器的配置。
type SchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerType SchedulerType `protobuf:"varint,1,opt,name=schedulerType,proto3,enum=pb_gen.SchedulerType" json:"schedulerType,omitempty"`
	// Types that are assignable to Configuration:
	//	*SchedulerConfiguration_NaiveSchedulerConfiguration
	//	*SchedulerConfiguration_UnsSchedulerConfiguration
	//	*SchedulerConfiguration_SjfSchedulerConfiguration
	//	*SchedulerConfiguration_EdfSchedulerConfiguration
	Configuration isSchedulerConfiguration_Configuration `protobuf_oneof:"Configuration"`
}

func (x *SchedulerConfiguration) Reset() {
	*x = SchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerConfiguration) ProtoMessage() {}

func (x *SchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*SchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *SchedulerConfiguration) GetSchedulerType() SchedulerType {
	if x != nil {
		return x.SchedulerType
	}
	return SchedulerType_schedulerTypeNaive
}

func (m *SchedulerConfiguration) GetConfiguration() isSchedulerConfiguration_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *SchedulerConfiguration) GetNaiveSchedulerConfiguration() *NaiveSchedulerConfiguration {
	if x, ok := x.GetConfiguration().(*SchedulerConfiguration_NaiveSchedulerConfiguration); ok {
		return x.NaiveSchedulerConfiguration
	}
	return nil
}

func (x *SchedulerConfiguration) GetUnsSchedulerConfiguration() *UNSSchedulerConfiguration {
	if x, ok := x.GetConfiguration().(*SchedulerConfiguration_UnsSchedulerConfiguration); ok {
		return x.UnsSchedulerConfiguration
	}
	return nil
}

func (x *SchedulerConfiguration) GetSjfSchedulerConfiguration() *SJFSchedulerConfiguration {
	if x, ok := x.GetConfiguration().(*SchedulerConfiguration_SjfSchedulerConfiguration); ok {
		return x.SjfSchedulerConfiguration
	}
	return nil
}

func (x *SchedulerConfiguration) GetEdfSchedulerConfiguration() *EDFSchedulerConfiguration {
	if x, ok := x.GetConfiguration().(*SchedulerConfiguration_EdfSchedulerConfiguration); ok {
		return x.EdfSchedulerConfiguration
	}
	return nil
}

type isSchedulerConfiguration_Configuration interface {
	isSchedulerConfiguration_Configuration()
}

type SchedulerConfiguration_NaiveSchedulerConfiguration struct {
	NaiveSchedulerConfiguration *NaiveSchedulerConfiguration `protobuf:"bytes,2,opt,name=naiveSchedulerConfiguration,proto3,oneof"`
}

type SchedulerConfiguration_UnsSchedulerConfiguration struct {
	UnsSchedulerConfiguration *UNSSchedulerConfiguration `protobuf:"bytes,3,opt,name=unsSchedulerConfiguration,proto3,oneof"`
}

type SchedulerConfiguration_SjfSchedulerConfiguration struct {
	SjfSchedulerConfiguration *SJFSchedulerConfiguration `protobuf:"bytes,4,opt,name=sjfSchedulerConfiguration,proto3,oneof"`
}

type SchedulerConfiguration_EdfSchedulerConfiguration struct {
	EdfSchedulerConfiguration *EDFSchedulerConfiguration `protobuf:"bytes,5,opt,name=edfSchedulerConfiguration,proto3,oneof"`
}

func (*SchedulerConfiguration_NaiveSchedulerConfiguration) isSchedulerConfiguration_Configuration() {}

func (*SchedulerConfiguration_UnsSchedulerConfiguration) isSchedulerConfiguration_Configuration() {}

func (*SchedulerConfiguration_SjfSchedulerConfiguration) isSchedulerConfiguration_Configuration() {}

func (*SchedulerConfiguration_EdfSchedulerConfiguration) isSchedulerConfiguration_Configuration() {}

type SchedulerConfigurationCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID            string                  `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID      string                  `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IntervalNano           int64                   `protobuf:"varint,4,opt,name=intervalNano,proto3" json:"intervalNano,omitempty"`
	SyncMode               bool                    `protobuf:"varint,5,opt,name=syncMode,proto3" json:"syncMode,omitempty"`
	PredictorConfiguration *PredictorConfiguration `protobuf:"bytes,6,opt,name=predictorConfiguration,proto3" json:"predictorConfiguration,omitempty"`
	NonSpaceSharing        bool                    `protobuf:"varint,7,opt,name=nonSpaceSharing,proto3" json:"nonSpaceSharing,omitempty"`
}

func (x *SchedulerConfigurationCommon) Reset() {
	*x = SchedulerConfigurationCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerConfigurationCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerConfigurationCommon) ProtoMessage() {}

func (x *SchedulerConfigurationCommon) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerConfigurationCommon.ProtoReflect.Descriptor instead.
func (*SchedulerConfigurationCommon) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *SchedulerConfigurationCommon) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *SchedulerConfigurationCommon) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *SchedulerConfigurationCommon) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *SchedulerConfigurationCommon) GetIntervalNano() int64 {
	if x != nil {
		return x.IntervalNano
	}
	return 0
}

func (x *SchedulerConfigurationCommon) GetSyncMode() bool {
	if x != nil {
		return x.SyncMode
	}
	return false
}

func (x *SchedulerConfigurationCommon) GetPredictorConfiguration() *PredictorConfiguration {
	if x != nil {
		return x.PredictorConfiguration
	}
	return nil
}

func (x *SchedulerConfigurationCommon) GetNonSpaceSharing() bool {
	if x != nil {
		return x.NonSpaceSharing
	}
	return false
}

type NaiveSchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID            string                  `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID      string                  `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IntervalNano           int64                   `protobuf:"varint,4,opt,name=intervalNano,proto3" json:"intervalNano,omitempty"`
	SyncMode               bool                    `protobuf:"varint,5,opt,name=syncMode,proto3" json:"syncMode,omitempty"`
	PredictorConfiguration *PredictorConfiguration `protobuf:"bytes,6,opt,name=predictorConfiguration,proto3" json:"predictorConfiguration,omitempty"`
	NonSpaceSharing        bool                    `protobuf:"varint,7,opt,name=nonSpaceSharing,proto3" json:"nonSpaceSharing,omitempty"`
}

func (x *NaiveSchedulerConfiguration) Reset() {
	*x = NaiveSchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaiveSchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaiveSchedulerConfiguration) ProtoMessage() {}

func (x *NaiveSchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaiveSchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*NaiveSchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *NaiveSchedulerConfiguration) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *NaiveSchedulerConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *NaiveSchedulerConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *NaiveSchedulerConfiguration) GetIntervalNano() int64 {
	if x != nil {
		return x.IntervalNano
	}
	return 0
}

func (x *NaiveSchedulerConfiguration) GetSyncMode() bool {
	if x != nil {
		return x.SyncMode
	}
	return false
}

func (x *NaiveSchedulerConfiguration) GetPredictorConfiguration() *PredictorConfiguration {
	if x != nil {
		return x.PredictorConfiguration
	}
	return nil
}

func (x *NaiveSchedulerConfiguration) GetNonSpaceSharing() bool {
	if x != nil {
		return x.NonSpaceSharing
	}
	return false
}

type SJFSchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID            string                  `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID      string                  `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IntervalNano           int64                   `protobuf:"varint,4,opt,name=intervalNano,proto3" json:"intervalNano,omitempty"`
	SyncMode               bool                    `protobuf:"varint,5,opt,name=syncMode,proto3" json:"syncMode,omitempty"`
	PredictorConfiguration *PredictorConfiguration `protobuf:"bytes,6,opt,name=predictorConfiguration,proto3" json:"predictorConfiguration,omitempty"`
	NonSpaceSharing        bool                    `protobuf:"varint,7,opt,name=nonSpaceSharing,proto3" json:"nonSpaceSharing,omitempty"`
}

func (x *SJFSchedulerConfiguration) Reset() {
	*x = SJFSchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SJFSchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SJFSchedulerConfiguration) ProtoMessage() {}

func (x *SJFSchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SJFSchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*SJFSchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *SJFSchedulerConfiguration) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *SJFSchedulerConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *SJFSchedulerConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *SJFSchedulerConfiguration) GetIntervalNano() int64 {
	if x != nil {
		return x.IntervalNano
	}
	return 0
}

func (x *SJFSchedulerConfiguration) GetSyncMode() bool {
	if x != nil {
		return x.SyncMode
	}
	return false
}

func (x *SJFSchedulerConfiguration) GetPredictorConfiguration() *PredictorConfiguration {
	if x != nil {
		return x.PredictorConfiguration
	}
	return nil
}

func (x *SJFSchedulerConfiguration) GetNonSpaceSharing() bool {
	if x != nil {
		return x.NonSpaceSharing
	}
	return false
}

type EDFSchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID            string                  `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID      string                  `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IntervalNano           int64                   `protobuf:"varint,4,opt,name=intervalNano,proto3" json:"intervalNano,omitempty"`
	SyncMode               bool                    `protobuf:"varint,5,opt,name=syncMode,proto3" json:"syncMode,omitempty"`
	PredictorConfiguration *PredictorConfiguration `protobuf:"bytes,6,opt,name=predictorConfiguration,proto3" json:"predictorConfiguration,omitempty"`
	NonSpaceSharing        bool                    `protobuf:"varint,7,opt,name=nonSpaceSharing,proto3" json:"nonSpaceSharing,omitempty"`
}

func (x *EDFSchedulerConfiguration) Reset() {
	*x = EDFSchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EDFSchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EDFSchedulerConfiguration) ProtoMessage() {}

func (x *EDFSchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EDFSchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*EDFSchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *EDFSchedulerConfiguration) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *EDFSchedulerConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *EDFSchedulerConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *EDFSchedulerConfiguration) GetIntervalNano() int64 {
	if x != nil {
		return x.IntervalNano
	}
	return 0
}

func (x *EDFSchedulerConfiguration) GetSyncMode() bool {
	if x != nil {
		return x.SyncMode
	}
	return false
}

func (x *EDFSchedulerConfiguration) GetPredictorConfiguration() *PredictorConfiguration {
	if x != nil {
		return x.PredictorConfiguration
	}
	return nil
}

func (x *EDFSchedulerConfiguration) GetNonSpaceSharing() bool {
	if x != nil {
		return x.NonSpaceSharing
	}
	return false
}

type UNSSchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID            string                  `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID      string                  `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IntervalNano           int64                   `protobuf:"varint,4,opt,name=intervalNano,proto3" json:"intervalNano,omitempty"`
	SyncMode               bool                    `protobuf:"varint,5,opt,name=syncMode,proto3" json:"syncMode,omitempty"`
	PredictorConfiguration *PredictorConfiguration `protobuf:"bytes,6,opt,name=predictorConfiguration,proto3" json:"predictorConfiguration,omitempty"`
	NonSpaceSharing        bool                    `protobuf:"varint,7,opt,name=nonSpaceSharing,proto3" json:"nonSpaceSharing,omitempty"`
}

func (x *UNSSchedulerConfiguration) Reset() {
	*x = UNSSchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UNSSchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UNSSchedulerConfiguration) ProtoMessage() {}

func (x *UNSSchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UNSSchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*UNSSchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *UNSSchedulerConfiguration) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *UNSSchedulerConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *UNSSchedulerConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *UNSSchedulerConfiguration) GetIntervalNano() int64 {
	if x != nil {
		return x.IntervalNano
	}
	return 0
}

func (x *UNSSchedulerConfiguration) GetSyncMode() bool {
	if x != nil {
		return x.SyncMode
	}
	return false
}

func (x *UNSSchedulerConfiguration) GetPredictorConfiguration() *PredictorConfiguration {
	if x != nil {
		return x.PredictorConfiguration
	}
	return nil
}

func (x *UNSSchedulerConfiguration) GetNonSpaceSharing() bool {
	if x != nil {
		return x.NonSpaceSharing
	}
	return false
}

// 任务执行时间预测器的配置
type PredictorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictorType PredictorType `protobuf:"varint,1,opt,name=predictorType,proto3,enum=pb_gen.PredictorType" json:"predictorType,omitempty"`
	// Types that are assignable to Configuration:
	//	*PredictorConfiguration_DLTPredictorRandomConfiguration
	//	*PredictorConfiguration_DLTPredictorDataOrientedConfiguration
	Configuration isPredictorConfiguration_Configuration `protobuf_oneof:"Configuration"`
}

func (x *PredictorConfiguration) Reset() {
	*x = PredictorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictorConfiguration) ProtoMessage() {}

func (x *PredictorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictorConfiguration.ProtoReflect.Descriptor instead.
func (*PredictorConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *PredictorConfiguration) GetPredictorType() PredictorType {
	if x != nil {
		return x.PredictorType
	}
	return PredictorType_predictorTypeUnknown
}

func (m *PredictorConfiguration) GetConfiguration() isPredictorConfiguration_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *PredictorConfiguration) GetDLTPredictorRandomConfiguration() *DLTPredictorRandomConfiguration {
	if x, ok := x.GetConfiguration().(*PredictorConfiguration_DLTPredictorRandomConfiguration); ok {
		return x.DLTPredictorRandomConfiguration
	}
	return nil
}

func (x *PredictorConfiguration) GetDLTPredictorDataOrientedConfiguration() *DLTPredictorDataOrientedConfiguration {
	if x, ok := x.GetConfiguration().(*PredictorConfiguration_DLTPredictorDataOrientedConfiguration); ok {
		return x.DLTPredictorDataOrientedConfiguration
	}
	return nil
}

type isPredictorConfiguration_Configuration interface {
	isPredictorConfiguration_Configuration()
}

type PredictorConfiguration_DLTPredictorRandomConfiguration struct {
	DLTPredictorRandomConfiguration *DLTPredictorRandomConfiguration `protobuf:"bytes,2,opt,name=DLTPredictorRandomConfiguration,proto3,oneof"`
}

type PredictorConfiguration_DLTPredictorDataOrientedConfiguration struct {
	DLTPredictorDataOrientedConfiguration *DLTPredictorDataOrientedConfiguration `protobuf:"bytes,3,opt,name=DLTPredictorDataOrientedConfiguration,proto3,oneof"`
}

func (*PredictorConfiguration_DLTPredictorRandomConfiguration) isPredictorConfiguration_Configuration() {
}

func (*PredictorConfiguration_DLTPredictorDataOrientedConfiguration) isPredictorConfiguration_Configuration() {
}

// 随机产生任务执行时间（仅测试用）
type DLTPredictorRandomConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DLTPredictorRandomConfiguration) Reset() {
	*x = DLTPredictorRandomConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTPredictorRandomConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTPredictorRandomConfiguration) ProtoMessage() {}

func (x *DLTPredictorRandomConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTPredictorRandomConfiguration.ProtoReflect.Descriptor instead.
func (*DLTPredictorRandomConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{9}
}

// 面向现有数据，预测任务执行时间
type DLTPredictorDataOrientedConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourcePath string `protobuf:"bytes,1,opt,name=dataSourcePath,proto3" json:"dataSourcePath,omitempty"`
}

func (x *DLTPredictorDataOrientedConfiguration) Reset() {
	*x = DLTPredictorDataOrientedConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTPredictorDataOrientedConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTPredictorDataOrientedConfiguration) ProtoMessage() {}

func (x *DLTPredictorDataOrientedConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTPredictorDataOrientedConfiguration.ProtoReflect.Descriptor instead.
func (*DLTPredictorDataOrientedConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10}
}

func (x *DLTPredictorDataOrientedConfiguration) GetDataSourcePath() string {
	if x != nil {
		return x.DataSourcePath
	}
	return ""
}

type DLTPredictorDataOrientedDataFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID2DLTJobData map[string]*DLTJobData `protobuf:"bytes,1,rep,name=jobID2DLTJobData,proto3" json:"jobID2DLTJobData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DLTPredictorDataOrientedDataFormat) Reset() {
	*x = DLTPredictorDataOrientedDataFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTPredictorDataOrientedDataFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTPredictorDataOrientedDataFormat) ProtoMessage() {}

func (x *DLTPredictorDataOrientedDataFormat) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTPredictorDataOrientedDataFormat.ProtoReflect.Descriptor instead.
func (*DLTPredictorDataOrientedDataFormat) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{11}
}

func (x *DLTPredictorDataOrientedDataFormat) GetJobID2DLTJobData() map[string]*DLTJobData {
	if x != nil {
		return x.JobID2DLTJobData
	}
	return nil
}

type DLTJobData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job              *objects.Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	TotalMiniBatches int64        `protobuf:"varint,2,opt,name=totalMiniBatches,proto3" json:"totalMiniBatches,omitempty"`
	// acceleratorType2MiniBatchDuration 表示单独运行时的每个accType上的mini-batch运行时间
	AcceleratorType2MiniBatchDuration *DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond `protobuf:"bytes,3,opt,name=acceleratorType2MiniBatchDuration,proto3" json:"acceleratorType2MiniBatchDuration,omitempty"`
	// spaceSharingMiniBatchDurations map<string, ...> key表示与它space sharing的jobID，当不为nil时，替代penalty生成方式。
	SpaceSharingMiniBatchDurations map[string]*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond `protobuf:"bytes,4,rep,name=spaceSharingMiniBatchDurations,proto3" json:"spaceSharingMiniBatchDurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MinSpaceSharingPenalty         float32                                                            `protobuf:"fixed32,5,opt,name=minSpaceSharingPenalty,proto3" json:"minSpaceSharingPenalty,omitempty"`
	MaxSpaceSharingPenalty         float32                                                            `protobuf:"fixed32,6,opt,name=maxSpaceSharingPenalty,proto3" json:"maxSpaceSharingPenalty,omitempty"`
	// consolidationLevel2MiniBatchDurations 当具体给定时，替代penalty生成方式
	ConsolidationLevel2MiniBatchDurations map[int64]*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond `protobuf:"bytes,7,rep,name=consolidationLevel2MiniBatchDurations,proto3" json:"consolidationLevel2MiniBatchDurations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConsolidationLevel2Penalties          map[int64]float32                                                 `protobuf:"bytes,8,rep,name=consolidationLevel2Penalties,proto3" json:"consolidationLevel2Penalties,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MaximumAcceleratorMemoryCostBytes     int64                                                             `protobuf:"varint,9,opt,name=maximumAcceleratorMemoryCostBytes,proto3" json:"maximumAcceleratorMemoryCostBytes,omitempty"`
}

func (x *DLTJobData) Reset() {
	*x = DLTJobData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTJobData) ProtoMessage() {}

func (x *DLTJobData) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTJobData.ProtoReflect.Descriptor instead.
func (*DLTJobData) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{12}
}

func (x *DLTJobData) GetJob() *objects.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *DLTJobData) GetTotalMiniBatches() int64 {
	if x != nil {
		return x.TotalMiniBatches
	}
	return 0
}

func (x *DLTJobData) GetAcceleratorType2MiniBatchDuration() *DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond {
	if x != nil {
		return x.AcceleratorType2MiniBatchDuration
	}
	return nil
}

func (x *DLTJobData) GetSpaceSharingMiniBatchDurations() map[string]*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond {
	if x != nil {
		return x.SpaceSharingMiniBatchDurations
	}
	return nil
}

func (x *DLTJobData) GetMinSpaceSharingPenalty() float32 {
	if x != nil {
		return x.MinSpaceSharingPenalty
	}
	return 0
}

func (x *DLTJobData) GetMaxSpaceSharingPenalty() float32 {
	if x != nil {
		return x.MaxSpaceSharingPenalty
	}
	return 0
}

func (x *DLTJobData) GetConsolidationLevel2MiniBatchDurations() map[int64]*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond {
	if x != nil {
		return x.ConsolidationLevel2MiniBatchDurations
	}
	return nil
}

func (x *DLTJobData) GetConsolidationLevel2Penalties() map[int64]float32 {
	if x != nil {
		return x.ConsolidationLevel2Penalties
	}
	return nil
}

func (x *DLTJobData) GetMaximumAcceleratorMemoryCostBytes() int64 {
	if x != nil {
		return x.MaximumAcceleratorMemoryCostBytes
	}
	return 0
}

// 模拟器配置
type DLTSimulatorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceManagerID      string                  `protobuf:"bytes,1,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID            string                  `protobuf:"bytes,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	RmConfiguration        *RMConfiguration        `protobuf:"bytes,3,opt,name=rmConfiguration,proto3" json:"rmConfiguration,omitempty"`
	PredictorConfiguration *PredictorConfiguration `protobuf:"bytes,4,opt,name=predictorConfiguration,proto3" json:"predictorConfiguration,omitempty"`
	Jobs                   []*objects.Job          `protobuf:"bytes,5,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *DLTSimulatorConfiguration) Reset() {
	*x = DLTSimulatorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTSimulatorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTSimulatorConfiguration) ProtoMessage() {}

func (x *DLTSimulatorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTSimulatorConfiguration.ProtoReflect.Descriptor instead.
func (*DLTSimulatorConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{13}
}

func (x *DLTSimulatorConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *DLTSimulatorConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *DLTSimulatorConfiguration) GetRmConfiguration() *RMConfiguration {
	if x != nil {
		return x.RmConfiguration
	}
	return nil
}

func (x *DLTSimulatorConfiguration) GetPredictorConfiguration() *PredictorConfiguration {
	if x != nil {
		return x.PredictorConfiguration
	}
	return nil
}

func (x *DLTSimulatorConfiguration) GetJobs() []*objects.Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccType2Duration map[string]int64 `protobuf:"bytes,1,rep,name=AccType2Duration,proto3" json:"AccType2Duration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond) Reset() {
	*x = DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond) ProtoMessage() {}

func (x *DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond.ProtoReflect.Descriptor instead.
func (*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond) GetAccType2Duration() map[string]int64 {
	if x != nil {
		return x.AccType2Duration
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x1a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x52, 0x4d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xaa, 0x02, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x22,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65,
	0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x75, 0x0a, 0x27, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x03, 0x0a,
	0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x1b, 0x6e, 0x61, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x4e, 0x61, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1b, 0x6e, 0x61, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a,
	0x19, 0x75, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x55, 0x4e, 0x53, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x75, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x61, 0x0a, 0x19, 0x73, 0x6a, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x4a, 0x46,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x73, 0x6a, 0x66, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x19, 0x65, 0x64, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x45, 0x44, 0x46, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x65, 0x64, 0x66,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x02, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xd1, 0x02, 0x0a,
	0x1b, 0x4e, 0x61, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61,
	0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xcf, 0x02, 0x0a, 0x19, 0x53, 0x4a, 0x46, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x56, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0xcf, 0x02, 0x0a, 0x19, 0x45, 0x44, 0x46, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x02, 0x0a, 0x19, 0x55, 0x4e, 0x53, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe3, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65,
	0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73,
	0x0a, 0x1f, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e,
	0x2e, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1f, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x25, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x25, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x1f,
	0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4f, 0x0a, 0x25, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xeb, 0x01, 0x0a, 0x22, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x6c, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x32, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4a, 0x6f,
	0x62, 0x49, 0x44, 0x32, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x32, 0x44, 0x4c, 0x54, 0x4a, 0x6f,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x57, 0x0a, 0x15, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x32, 0x44,
	0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac,
	0x0b, 0x0a, 0x0a, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x21, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c,
	0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x52, 0x21, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12,
	0x36, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x16, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x93, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d,
	0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e,
	0x2e, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d,
	0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x78, 0x0a,
	0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54,
	0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x2b, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x2e, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x91, 0x01,
	0x0a, 0x23, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x44, 0x4c, 0x54, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x98, 0x01, 0x0a, 0x2a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x4a, 0x6f,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x21,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02,
	0x0a, 0x19, 0x44, 0x4c, 0x54, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0f, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52, 0x4d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x2a, 0x69, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x69, 0x76, 0x65, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x4a, 0x46, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x44, 0x46,
	0x10, 0x03, 0x2a, 0x67, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c,
	0x54, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x54, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x56, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x61,
	0x6d, 0x65, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x69, 0x66, 0x66, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x04, 0x42, 0x14,
	0x5a, 0x12, 0x55, 0x4e, 0x53, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_config_proto_goTypes = []interface{}{
	(SchedulerType)(0),                            // 0: pb_gen.SchedulerType
	(PredictorType)(0),                            // 1: pb_gen.PredictorType
	(ConsolidationLevel)(0),                       // 2: pb_gen.ConsolidationLevel
	(*RMConfiguration)(nil),                       // 3: pb_gen.RMConfiguration
	(*SchedulersConfiguration)(nil),               // 4: pb_gen.SchedulersConfiguration
	(*SchedulerConfiguration)(nil),                // 5: pb_gen.SchedulerConfiguration
	(*SchedulerConfigurationCommon)(nil),          // 6: pb_gen.SchedulerConfigurationCommon
	(*NaiveSchedulerConfiguration)(nil),           // 7: pb_gen.NaiveSchedulerConfiguration
	(*SJFSchedulerConfiguration)(nil),             // 8: pb_gen.SJFSchedulerConfiguration
	(*EDFSchedulerConfiguration)(nil),             // 9: pb_gen.EDFSchedulerConfiguration
	(*UNSSchedulerConfiguration)(nil),             // 10: pb_gen.UNSSchedulerConfiguration
	(*PredictorConfiguration)(nil),                // 11: pb_gen.PredictorConfiguration
	(*DLTPredictorRandomConfiguration)(nil),       // 12: pb_gen.DLTPredictorRandomConfiguration
	(*DLTPredictorDataOrientedConfiguration)(nil), // 13: pb_gen.DLTPredictorDataOrientedConfiguration
	(*DLTPredictorDataOrientedDataFormat)(nil),    // 14: pb_gen.DLTPredictorDataOrientedDataFormat
	(*DLTJobData)(nil),                            // 15: pb_gen.DLTJobData
	(*DLTSimulatorConfiguration)(nil),             // 16: pb_gen.DLTSimulatorConfiguration
	nil,                                           // 17: pb_gen.SchedulersConfiguration.PartitionID2SchedulerConfigurationEntry
	nil,                                           // 18: pb_gen.DLTPredictorDataOrientedDataFormat.JobID2DLTJobDataEntry
	(*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond)(nil), // 19: pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond
	nil,                     // 20: pb_gen.DLTJobData.SpaceSharingMiniBatchDurationsEntry
	nil,                     // 21: pb_gen.DLTJobData.ConsolidationLevel2MiniBatchDurationsEntry
	nil,                     // 22: pb_gen.DLTJobData.ConsolidationLevel2PenaltiesEntry
	nil,                     // 23: pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond.AccType2DurationEntry
	(*objects.Cluster)(nil), // 24: pb_gen.Cluster
	(*objects.Job)(nil),     // 25: pb_gen.Job
}
var file_config_proto_depIdxs = []int32{
	24, // 0: pb_gen.RMConfiguration.cluster:type_name -> pb_gen.Cluster
	4,  // 1: pb_gen.RMConfiguration.schedulersConfiguration:type_name -> pb_gen.SchedulersConfiguration
	17, // 2: pb_gen.SchedulersConfiguration.partitionID2SchedulerConfiguration:type_name -> pb_gen.SchedulersConfiguration.PartitionID2SchedulerConfigurationEntry
	0,  // 3: pb_gen.SchedulerConfiguration.schedulerType:type_name -> pb_gen.SchedulerType
	7,  // 4: pb_gen.SchedulerConfiguration.naiveSchedulerConfiguration:type_name -> pb_gen.NaiveSchedulerConfiguration
	10, // 5: pb_gen.SchedulerConfiguration.unsSchedulerConfiguration:type_name -> pb_gen.UNSSchedulerConfiguration
	8,  // 6: pb_gen.SchedulerConfiguration.sjfSchedulerConfiguration:type_name -> pb_gen.SJFSchedulerConfiguration
	9,  // 7: pb_gen.SchedulerConfiguration.edfSchedulerConfiguration:type_name -> pb_gen.EDFSchedulerConfiguration
	11, // 8: pb_gen.SchedulerConfigurationCommon.predictorConfiguration:type_name -> pb_gen.PredictorConfiguration
	11, // 9: pb_gen.NaiveSchedulerConfiguration.predictorConfiguration:type_name -> pb_gen.PredictorConfiguration
	11, // 10: pb_gen.SJFSchedulerConfiguration.predictorConfiguration:type_name -> pb_gen.PredictorConfiguration
	11, // 11: pb_gen.EDFSchedulerConfiguration.predictorConfiguration:type_name -> pb_gen.PredictorConfiguration
	11, // 12: pb_gen.UNSSchedulerConfiguration.predictorConfiguration:type_name -> pb_gen.PredictorConfiguration
	1,  // 13: pb_gen.PredictorConfiguration.predictorType:type_name -> pb_gen.PredictorType
	12, // 14: pb_gen.PredictorConfiguration.DLTPredictorRandomConfiguration:type_name -> pb_gen.DLTPredictorRandomConfiguration
	13, // 15: pb_gen.PredictorConfiguration.DLTPredictorDataOrientedConfiguration:type_name -> pb_gen.DLTPredictorDataOrientedConfiguration
	18, // 16: pb_gen.DLTPredictorDataOrientedDataFormat.jobID2DLTJobData:type_name -> pb_gen.DLTPredictorDataOrientedDataFormat.JobID2DLTJobDataEntry
	25, // 17: pb_gen.DLTJobData.job:type_name -> pb_gen.Job
	19, // 18: pb_gen.DLTJobData.acceleratorType2MiniBatchDuration:type_name -> pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond
	20, // 19: pb_gen.DLTJobData.spaceSharingMiniBatchDurations:type_name -> pb_gen.DLTJobData.SpaceSharingMiniBatchDurationsEntry
	21, // 20: pb_gen.DLTJobData.consolidationLevel2MiniBatchDurations:type_name -> pb_gen.DLTJobData.ConsolidationLevel2MiniBatchDurationsEntry
	22, // 21: pb_gen.DLTJobData.consolidationLevel2Penalties:type_name -> pb_gen.DLTJobData.ConsolidationLevel2PenaltiesEntry
	3,  // 22: pb_gen.DLTSimulatorConfiguration.rmConfiguration:type_name -> pb_gen.RMConfiguration
	11, // 23: pb_gen.DLTSimulatorConfiguration.predictorConfiguration:type_name -> pb_gen.PredictorConfiguration
	25, // 24: pb_gen.DLTSimulatorConfiguration.jobs:type_name -> pb_gen.Job
	5,  // 25: pb_gen.SchedulersConfiguration.PartitionID2SchedulerConfigurationEntry.value:type_name -> pb_gen.SchedulerConfiguration
	15, // 26: pb_gen.DLTPredictorDataOrientedDataFormat.JobID2DLTJobDataEntry.value:type_name -> pb_gen.DLTJobData
	23, // 27: pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond.AccType2Duration:type_name -> pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond.AccType2DurationEntry
	19, // 28: pb_gen.DLTJobData.SpaceSharingMiniBatchDurationsEntry.value:type_name -> pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond
	19, // 29: pb_gen.DLTJobData.ConsolidationLevel2MiniBatchDurationsEntry.value:type_name -> pb_gen.DLTJobData.AcceleratorType2MiniBatchDurationNanoSecond
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulersConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerConfigurationCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaiveSchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SJFSchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EDFSchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UNSSchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTPredictorRandomConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTPredictorDataOrientedConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTPredictorDataOrientedDataFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTJobData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTSimulatorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTJobData_AcceleratorType2MiniBatchDurationNanoSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SchedulerConfiguration_NaiveSchedulerConfiguration)(nil),
		(*SchedulerConfiguration_UnsSchedulerConfiguration)(nil),
		(*SchedulerConfiguration_SjfSchedulerConfiguration)(nil),
		(*SchedulerConfiguration_EdfSchedulerConfiguration)(nil),
	}
	file_config_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PredictorConfiguration_DLTPredictorRandomConfiguration)(nil),
		(*PredictorConfiguration_DLTPredictorDataOrientedConfiguration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
